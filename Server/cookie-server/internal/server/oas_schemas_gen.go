// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"
)

func (s *ErrRespStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BuyPostOK struct {
	Ingredient OptString  `json:"ingredient"`
	Amount     OptInt     `json:"amount"`
	TotalPrice OptFloat64 `json:"totalPrice"`
}

// GetIngredient returns the value of Ingredient.
func (s *BuyPostOK) GetIngredient() OptString {
	return s.Ingredient
}

// GetAmount returns the value of Amount.
func (s *BuyPostOK) GetAmount() OptInt {
	return s.Amount
}

// GetTotalPrice returns the value of TotalPrice.
func (s *BuyPostOK) GetTotalPrice() OptFloat64 {
	return s.TotalPrice
}

// SetIngredient sets the value of Ingredient.
func (s *BuyPostOK) SetIngredient(val OptString) {
	s.Ingredient = val
}

// SetAmount sets the value of Amount.
func (s *BuyPostOK) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *BuyPostOK) SetTotalPrice(val OptFloat64) {
	s.TotalPrice = val
}

// ErrRespStatusCode wraps string with StatusCode.
type ErrRespStatusCode struct {
	StatusCode int
	Response   string
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrRespStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrRespStatusCode) GetResponse() string {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrRespStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrRespStatusCode) SetResponse(val string) {
	s.Response = val
}

// Ref: #/components/schemas/Market
type Market struct {
	ID             string    `json:"id"`
	Date           time.Time `json:"date"`
	SugarPrice     float64   `json:"sugarPrice"`
	FlourPrice     float64   `json:"flourPrice"`
	EggsPrice      float64   `json:"eggsPrice"`
	ButterPrice    float64   `json:"butterPrice"`
	ChocolatePrice float64   `json:"chocolatePrice"`
	MilkPrice      float64   `json:"milkPrice"`
}

// GetID returns the value of ID.
func (s *Market) GetID() string {
	return s.ID
}

// GetDate returns the value of Date.
func (s *Market) GetDate() time.Time {
	return s.Date
}

// GetSugarPrice returns the value of SugarPrice.
func (s *Market) GetSugarPrice() float64 {
	return s.SugarPrice
}

// GetFlourPrice returns the value of FlourPrice.
func (s *Market) GetFlourPrice() float64 {
	return s.FlourPrice
}

// GetEggsPrice returns the value of EggsPrice.
func (s *Market) GetEggsPrice() float64 {
	return s.EggsPrice
}

// GetButterPrice returns the value of ButterPrice.
func (s *Market) GetButterPrice() float64 {
	return s.ButterPrice
}

// GetChocolatePrice returns the value of ChocolatePrice.
func (s *Market) GetChocolatePrice() float64 {
	return s.ChocolatePrice
}

// GetMilkPrice returns the value of MilkPrice.
func (s *Market) GetMilkPrice() float64 {
	return s.MilkPrice
}

// SetID sets the value of ID.
func (s *Market) SetID(val string) {
	s.ID = val
}

// SetDate sets the value of Date.
func (s *Market) SetDate(val time.Time) {
	s.Date = val
}

// SetSugarPrice sets the value of SugarPrice.
func (s *Market) SetSugarPrice(val float64) {
	s.SugarPrice = val
}

// SetFlourPrice sets the value of FlourPrice.
func (s *Market) SetFlourPrice(val float64) {
	s.FlourPrice = val
}

// SetEggsPrice sets the value of EggsPrice.
func (s *Market) SetEggsPrice(val float64) {
	s.EggsPrice = val
}

// SetButterPrice sets the value of ButterPrice.
func (s *Market) SetButterPrice(val float64) {
	s.ButterPrice = val
}

// SetChocolatePrice sets the value of ChocolatePrice.
func (s *Market) SetChocolatePrice(val float64) {
	s.ChocolatePrice = val
}

// SetMilkPrice sets the value of MilkPrice.
func (s *Market) SetMilkPrice(val float64) {
	s.MilkPrice = val
}

// Ref: #/components/schemas/MarketRequest
type MarketRequest struct {
	User     User   `json:"user"`
	Amount   int    `json:"amount"`
	Recourse string `json:"recourse"`
}

// GetUser returns the value of User.
func (s *MarketRequest) GetUser() User {
	return s.User
}

// GetAmount returns the value of Amount.
func (s *MarketRequest) GetAmount() int {
	return s.Amount
}

// GetRecourse returns the value of Recourse.
func (s *MarketRequest) GetRecourse() string {
	return s.Recourse
}

// SetUser sets the value of User.
func (s *MarketRequest) SetUser(val User) {
	s.User = val
}

// SetAmount sets the value of Amount.
func (s *MarketRequest) SetAmount(val int) {
	s.Amount = val
}

// SetRecourse sets the value of Recourse.
func (s *MarketRequest) SetRecourse(val string) {
	s.Recourse = val
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/User
type User struct {
	ID        string  `json:"id"`
	Cookies   float64 `json:"cookies"`
	Sugar     float64 `json:"sugar"`
	Flour     float64 `json:"flour"`
	Eggs      float64 `json:"eggs"`
	Butter    float64 `json:"butter"`
	Chocolate float64 `json:"chocolate"`
	Milk      float64 `json:"milk"`
}

// GetID returns the value of ID.
func (s *User) GetID() string {
	return s.ID
}

// GetCookies returns the value of Cookies.
func (s *User) GetCookies() float64 {
	return s.Cookies
}

// GetSugar returns the value of Sugar.
func (s *User) GetSugar() float64 {
	return s.Sugar
}

// GetFlour returns the value of Flour.
func (s *User) GetFlour() float64 {
	return s.Flour
}

// GetEggs returns the value of Eggs.
func (s *User) GetEggs() float64 {
	return s.Eggs
}

// GetButter returns the value of Butter.
func (s *User) GetButter() float64 {
	return s.Butter
}

// GetChocolate returns the value of Chocolate.
func (s *User) GetChocolate() float64 {
	return s.Chocolate
}

// GetMilk returns the value of Milk.
func (s *User) GetMilk() float64 {
	return s.Milk
}

// SetID sets the value of ID.
func (s *User) SetID(val string) {
	s.ID = val
}

// SetCookies sets the value of Cookies.
func (s *User) SetCookies(val float64) {
	s.Cookies = val
}

// SetSugar sets the value of Sugar.
func (s *User) SetSugar(val float64) {
	s.Sugar = val
}

// SetFlour sets the value of Flour.
func (s *User) SetFlour(val float64) {
	s.Flour = val
}

// SetEggs sets the value of Eggs.
func (s *User) SetEggs(val float64) {
	s.Eggs = val
}

// SetButter sets the value of Butter.
func (s *User) SetButter(val float64) {
	s.Butter = val
}

// SetChocolate sets the value of Chocolate.
func (s *User) SetChocolate(val float64) {
	s.Chocolate = val
}

// SetMilk sets the value of Milk.
func (s *User) SetMilk(val float64) {
	s.Milk = val
}
